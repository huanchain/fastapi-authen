.PHONY: help install dev test test-unit test-integration test-cov clean format lint type-check security run docker-build docker-up docker-down migrate docs

# Colors for output
BLUE := \033[0;34m
GREEN := \033[0;32m
YELLOW := \033[1;33m
NC := \033[0m # No Color

help: ## Show this help message
	@echo '$(BLUE)FastAPI Authentication API - Available Commands:$(NC)'
	@echo ''
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "  $(GREEN)%-20s$(NC) %s\n", $$1, $$2}'
	@echo ''

install: ## Install dependencies
	@echo '$(BLUE)Installing dependencies...$(NC)'
	pip install --upgrade pip
	pip install -r requirements.txt
	pre-commit install

install-dev: install ## Install development dependencies
	@echo '$(BLUE)Installing development dependencies...$(NC)'
	pip install black isort flake8 mypy pytest pytest-cov pre-commit

dev: ## Run development server
	@echo '$(GREEN)Starting development server...$(NC)'
	uvicorn app.main:app --reload --host 0.0.0.0 --port 8000

test: ## Run all tests
	@echo '$(BLUE)Running all tests...$(NC)'
	pytest -v

test-unit: ## Run unit tests only
	@echo '$(BLUE)Running unit tests...$(NC)'
	pytest tests/unit -v -m unit

test-integration: ## Run integration tests only
	@echo '$(BLUE)Running integration tests...$(NC)'
	pytest tests/integration -v -m integration

test-cov: ## Run tests with coverage
	@echo '$(BLUE)Running tests with coverage...$(NC)'
	pytest --cov=app --cov-report=html --cov-report=term-missing --cov-report=xml
	@echo '$(GREEN)Coverage report generated in htmlcov/index.html$(NC)'

test-watch: ## Run tests in watch mode
	@echo '$(BLUE)Running tests in watch mode...$(NC)'
	pytest-watch

clean: ## Clean up cache and build files
	@echo '$(YELLOW)Cleaning up...$(NC)'
	find . -type d -name __pycache__ -exec rm -rf {} + 2>/dev/null || true
	find . -type f -name '*.pyc' -delete
	find . -type f -name '*.pyo' -delete
	find . -type d -name '*.egg-info' -exec rm -rf {} + 2>/dev/null || true
	rm -rf .pytest_cache .coverage htmlcov/ .mypy_cache dist/ build/
	@echo '$(GREEN)Cleanup complete!$(NC)'

format: ## Format code with black and isort
	@echo '$(BLUE)Formatting code...$(NC)'
	black app tests
	isort app tests
	@echo '$(GREEN)Code formatting complete!$(NC)'

format-check: ## Check code formatting
	@echo '$(BLUE)Checking code formatting...$(NC)'
	black --check app tests
	isort --check-only app tests

lint: ## Run linting
	@echo '$(BLUE)Running linters...$(NC)'
	flake8 app tests --max-line-length=88 --extend-ignore=E203,W503
	@echo '$(GREEN)Linting complete!$(NC)'

type-check: ## Run type checking with mypy
	@echo '$(BLUE)Running type checker...$(NC)'
	mypy app --ignore-missing-imports
	@echo '$(GREEN)Type checking complete!$(NC)'

security: ## Run security checks
	@echo '$(BLUE)Running security checks...$(NC)'
	bandit -r app -f json || true
	safety check --json || true
	@echo '$(GREEN)Security check complete!$(NC)'

quality: format lint type-check security ## Run all quality checks

pre-commit: ## Run pre-commit hooks
	@echo '$(BLUE)Running pre-commit hooks...$(NC)'
	pre-commit run --all-files

run: ## Run production server
	@echo '$(GREEN)Starting production server...$(NC)'
	gunicorn app.main:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

migrate: ## Run database migrations
	@echo '$(BLUE)Running database migrations...$(NC)'
	alembic upgrade head
	@echo '$(GREEN)Migrations complete!$(NC)'

migrate-create: ## Create a new migration (usage: make migrate-create MESSAGE="your message")
	@echo '$(BLUE)Creating new migration...$(NC)'
	alembic revision --autogenerate -m "$(MESSAGE)"

migrate-rollback: ## Rollback last migration
	@echo '$(YELLOW)Rolling back last migration...$(NC)'
	alembic downgrade -1

db-reset: ## Reset database
	@echo '$(YELLOW)Resetting database...$(NC)'
	rm -f fastapi_auth.db
	alembic upgrade head
	@echo '$(GREEN)Database reset complete!$(NC)'

docker-build: ## Build Docker image
	@echo '$(BLUE)Building Docker image...$(NC)'
	docker build -t fastapi-auth:latest .
	@echo '$(GREEN)Docker image built!$(NC)'

docker-up: ## Start Docker containers
	@echo '$(GREEN)Starting Docker containers...$(NC)'
	docker-compose up -d
	@echo '$(GREEN)Containers started!$(NC)'

docker-down: ## Stop Docker containers
	@echo '$(YELLOW)Stopping Docker containers...$(NC)'
	docker-compose down
	@echo '$(GREEN)Containers stopped!$(NC)'

docker-logs: ## View Docker logs
	docker-compose logs -f

docker-prod-up: ## Start production Docker setup
	@echo '$(GREEN)Starting production containers...$(NC)'
	docker-compose -f docker-compose.prod.yml up -d
	@echo '$(GREEN)Production containers started!$(NC)'

docker-prod-down: ## Stop production Docker setup
	@echo '$(YELLOW)Stopping production containers...$(NC)'
	docker-compose -f docker-compose.prod.yml down
	@echo '$(GREEN)Production containers stopped!$(NC)'

logs: ## View application logs
	tail -f logs/app.log

logs-error: ## View error logs
	tail -f logs/error.log

docs: ## Open API documentation
	@echo '$(BLUE)Opening API documentation...$(NC)'
	@echo 'Swagger UI: http://localhost:8000/docs'
	@echo 'ReDoc: http://localhost:8000/redoc'

check: format-check lint type-check test ## Run all checks

ci: install quality test-cov ## Run CI pipeline locally

init: ## Initialize project
	@echo '$(BLUE)Initializing project...$(NC)'
	cp env.example .env
	python -m venv venv
	@echo '$(GREEN)Project initialized!$(NC)'
	@echo '$(YELLOW)Next steps:$(NC)'
	@echo '  1. Activate virtual environment: source venv/bin/activate'
	@echo '  2. Install dependencies: make install'
	@echo '  3. Edit .env file with your configuration'
	@echo '  4. Run migrations: make migrate'
	@echo '  5. Start development server: make dev'

all: clean install migrate test ## Clean, install, migrate, and test

.DEFAULT_GOAL := help

